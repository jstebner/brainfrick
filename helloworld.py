# lord forgive me for what i have done
(lambda instructions: (lambda f: lambda a: f(f, a))(lambda f, a: None if a[4] == len(a[0]) else f(f, [*a[:2], *(lambda instr, MEM_SIZE, mem, mp, ip, loop_stack: {'>': (mem, (mp + 1) % MEM_SIZE, ip+1, loop_stack), '<': (mem, (mp - 1) % MEM_SIZE, ip+1, loop_stack), '+': (mem[:mp] + [(mem[mp] + 1) % 256] + mem[mp+1:], mp, ip+1, loop_stack), '-': (mem[:mp] + [(mem[mp] - 1) % 256] + mem[mp+1:], mp, ip+1, loop_stack), '[': (mem, mp, (ip if (instr[ip] != '[' or mem[mp] != 0) else (lambda f: lambda *a: f(f,*a))(lambda f, idx, instr, count: idx if count == 0 else f(f, idx+1, instr, count + (1 if instr[idx+1] == '[' else -1 if instr[idx+1] == ']' else 0)))(ip, instr, 1))+1, loop_stack + ([] if (instr[ip] != '[' or mem[mp] == 0) else [ip])), ']': (mem, mp, None if instr[ip] != ']' else loop_stack.pop(), loop_stack), ',': (mem[:mp] + ([] if instr[ip] != ',' else [ord(input()[0]) % 256]) + mem[mp+1:], mp, ip+1, loop_stack), '.': [None if instr[ip] != '.' else print(chr(mem[mp]), end=''), (mem, mp, ip+1, loop_stack)][1], }[instr[ip]])(*a)]))([list(filter(lambda x: x in '><+-[],.', instructions)), 32, [0]*32, 0, 0, list()]))('>+++++++++[<++++++++>-]<.>+++++++[<++++>-]<+.+++++++..+++.>>>++++++++[<++++>-]<.>>>++++++++++[<+++++++++>-]<---.<<<<.+++.------.--------.>>+.>++++++++++.')